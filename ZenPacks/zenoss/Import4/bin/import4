#!/usr/bin/env python
##############################################################################
#
# Copyright (C) Zenoss, Inc. 2014-2015, all rights reserved.
#
# This content is made available according to terms specified in
# License.zenoss under the directory where your Zenoss product is installed.
#
##############################################################################

import argparse
import sys, traceback

from ZenPacks.zenoss.Import4 import migration, model, events, perf
from ZenPacks.zenoss.Import4.migration import Config

exitCode = {
    # event module mapping
    events.Results.COMMAND_ERROR: 8,
    events.Results.UNTAR_FAIL: 7,
    events.Results.INVALID: 6,

    events.Results.FAILURE: 2,
    events.Results.WARNING: 1,
    events.Results.SUCCESS: 0,

    # migration module mapping
    migration.Results.FAILURE: 2,
    migration.Results.WARNING: 1,
    migration.Results.SUCCESS: 0,

    None: -1    # when the method has not been implemented
}


def run_migration(migration_class, args):
    # The main control running a migration process
    _migration = migration_class(args, progress_report_callback)

    # the prevalidation phase
    try:
        _migration.prevalidate()

        # we return when it is just a dryrun
        if args.dryrun:
            exit(exitCode[migration.Results.SUCCESS])

        _migration.wipe()
        _migration.doImport()
        _migration.postvalidate()

    except migration.ImportError as err:
        sys.stderr.write('Error: %s(%d)\n' % (err.error_string, err.return_code))
        _rc = exitCode[err.error_string]
        if _rc >= exitCode[migration.Results.FAILURE]:
            exit(_rc)
        elif (_rc == exitCode[migration.Results.WARNING]) and (not args.ignorewarnings):
            exit(_rc)
            # else, we continue
    except Exception as e:
        # unrecognized exception
        print "Huh? unknown exception during import ---", e
        traceback.print_exc(file=sys.stderr)
        exit(-1)

    # all finished successfully
    exit(exitCode[migration.Results.SUCCESS])


def progress_report_callback(msg):
    sys.stdout.write(msg)


def parse_args():
    parser = argparse.ArgumentParser(
        description=(
            "Import data from a 4.x Zenoss instance. These imports are destructive - "
            "the relevant datastores on this instance will be destroyed, and the 4.x "
            "data imported in its place.\n\n"
            "Model data migration must be run first, and only by itself.\n"
            "Events and Performance data migration may be run simultaneously."
        )
    )

    parser.add_argument('-c', '--check', '--dry-run', action='store_true', dest='dryrun', default=False,
                        help="Pre-validate only, do not perform any destructive operations")
    parser.add_argument('-f', '--ignore-warnings', action='store_true', dest='ignorewarnings', default=False,
                        help="Continue with the import even if pre-validation generates warnings")
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', default=False,
                        help="Log at debug level")
    parser.add_argument('-s', '--stage', dest='staging_dir', default=Config.stageDir,
                        help="Location to use for file staging during the import process")
    parser.add_argument('-i', '--ip', dest='ip', default="localhost",
                        help="The ip address for MariaDB host")
    parser.add_argument('-u', '--user', dest='user', default='root',
                        help="The username for MariaDB access")
    parser.add_argument('-p', '--password', dest='password', default=None,
                        help="The password for MariaDB access")

    subparsers = parser.add_subparsers(help='Group of migration functions')

    for module in (model, events, perf):
        m_parser = module.init_command_parser(subparsers)
        m_parser.set_defaults(functor=lambda args, mclass=module.Migration: run_migration(mclass, args))

    args = parser.parse_args()

    return args


def main():
    args = parse_args()
    args.functor(args)


if __name__ == "__main__":
    main()
